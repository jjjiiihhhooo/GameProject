using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class chap4_NoteBox : MonoBehaviour
{
    [HideInInspector] public chap4_NoteManager noteManager;
    public chap4_Note[] notes;

    protected bool canOutput; // 종합적인 출력 가능 여부

    //---------------------------------------------------------------------------------확인용

    [HideInInspector] public bool isTrigger = false; // 플레이어가 닿았는지
    [HideInInspector] public bool turnOn = true; // 복수의 DialogueBox 컴포넌트가 존재할 경우 게임 오브젝트에서 제어

    // 각각 대화 현재 진행 여부, 시작, 종료 상태를 나타냄.
    [HideInInspector] public bool isLog;
    [HideInInspector] public bool isStarted; // 한 번이라도 대화가 호출되면 계속 true
    [HideInInspector] public bool isEnd; // 한 번이라도 대화가 호출된 이후 종료된 적이 있으면 계속 true
    [HideInInspector] public bool noMore;

    //---------------------------------------------------------------------------------확인용

    //public bool isTrigger = false; // 플레이어가 닿았는지
    //public bool turnOn = true; // 복수의 DialogueBox 컴포넌트가 존재할 경우 게임 오브젝트에서 제어

    //// 각각 대화 현재 진행 여부, 시작, 종료 상태를 나타냄.
    //public bool isLog;
    //public bool isStarted; // 한 번이라도 대화가 호출되면 계속 true
    //public bool isEnd; // 한 번이라도 대화가 호출된 이후 종료된 적이 있으면 계속 true
    //public bool noMore;

    //---------------------------------------------------------------------------------

    protected bool start;

    // 대화 반복 출력 여부
    // breakConditions 에 입력된 값이 충족되면, 더이상 대화/ 선택창을 반복해서 띄우지 않음(isRepeat = false;)
    [Serializable]
    public struct BreakCondition
    {
        public int _index;
        public int _value;
        public bool _isClear;
    }
    [SerializeField]
    protected BreakCondition[] breakConditions;
    public bool isRepeat;
    protected int count = 0;
    protected int conLenth;

    public bool isContinue;

    protected virtual void Start()
    {
        noteManager = FindObjectOfType<chap4_NoteManager>();
        conLenth = breakConditions.Length;
    }

    protected virtual void OnTriggerEnter2D(Collider2D other)
    {
        if (other.tag == "Player")
        {
            isTrigger = true;
        }
    }

    protected virtual void OnTriggerExit2D(Collider2D other)
    {
        if (other.tag == "Player")
        {
            isTrigger = false;
        }
    }

    protected virtual void Update()
    {
        if (noteManager.isEnd && isStarted && !isEnd)
        {
            isEnd = true;
            noteManager.isEnd = false;
        }

        if (isLog && !GetBoolLog())
        {
            isLog = false;
        }
        noMore = !isRepeat && isEnd ? true : false;

        canOutput = isTrigger && turnOn ? true : false;

        // 대화/선택창 출력
        if (canOutput && Input.GetKeyDown(KeyCode.Space))
        {
            SetDialogue();
        }

        if (this.isLog) start = true;

        if (start && this.isRepeat)
        {
            count = 0;
            for (int i = 0; i < conLenth; i++)
            {
                if (noteManager.result[breakConditions[i]._index] == breakConditions[i]._value)
                {
                    breakConditions[i]._isClear = true;
                }
                if(breakConditions[i]._isClear == true)
                {
                    count++;
                    if (count == conLenth)
                    {
                        isRepeat = false;
                        count = 0;
                    }
                }
            }
        }
    }

    public void SetDialogue()
    {
        if (!noMore)
        {
            noteManager.Talking = true;
            isTrigger = false;
            isStarted = true;
            noteManager.UpdateDialogue(notes);
            isLog = true;
        }
    }

    public bool GetBoolLog()
    {
        return noteManager.onDialogue;
    }
}

